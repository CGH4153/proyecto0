
### This is an auto-generated test suite, it needs to be completed with valid data.
### These are not all tests you need, more of them should be created to evaluate the functional
### requirements of your project. These tests only test the CRUD endpoints of the entity.
### Silence is a DEAL research team project, more info about us in https://deal.us.es
@BASE = http://127.0.0.1:8080/api/v1

### Auxiliary query
### Positive test
### Test 00: Get all existing hoke
### This query is used in several of the below tests it should be executed first.
# @name hoke
GET {{BASE}}/hoke

### Login a(n) users and save the generated token 
### This token is used in several of the below tests it should be executed second.
# @name login
POST {{BASE}}/login 
Content-Type: application/json 

{ 
	"username": ###REPLACE###,
	"password": ###REPLACE###
}

###
@token = {{login.response.body.sessionToken}}


### TESTS BEGIN

### Test 01: Get one existing hoke by its id.
### positive test 
@hokId = {{hoke.response.body.0.musicId}}
GET {{BASE}}/hoke/{{hokId}} 
Content-Type: application/json 


### Test 02: Try get one existing hoke by its nonexistent id.
### negative test 
GET {{BASE}}/hoke/999999999
Content-Type: application/json 


### Test 03: Add a new hoke successfully
### Positive test 
### We assume that the token has been aquired by the login request.
# @name newhoke
POST {{BASE}}/hoke 
Content-Type: application/json 
Token: {{token}} 

{
	"nombre": ###REPLACE###,
	"url": ###REPLACE###,
	"artista": ###REPLACE###,
	"fecha_publicacion": ###REPLACE###,
	"spotify_id": ###REPLACE###
} 

### Check the created hoke

@newhokeid = {{newhoke.response.body.lastId}}
GET {{BASE}}/hoke/{{newhokeid}}
Content-Type: application/json 

### Test 04: Add a new hoke without a session token
### Negative test 
POST {{BASE}}/hoke 
Content-Type: application/json 

{ 
	"nombre": ###REPLACE###,
	"url": ###REPLACE###,
	"artista": ###REPLACE###,
	"fecha_publicacion": ###REPLACE###,
	"spotify_id": ###REPLACE###
}

### Test 05: Modify an existing hoke 
### Positive test 
@hokId = {{hoke.response.body.0.musicId}} 
PUT {{BASE}}/hoke/{{hokId}} 
Content-Type: application/json 
Token: {{token}} 

{ 
	"nombre": ###REPLACE###,
	"url": ###REPLACE###,
	"artista": ###REPLACE###,
	"fecha_publicacion": ###REPLACE###,
	"spotify_id": ###REPLACE###
}

### Check the modified hoke

GET {{BASE}}/hoke/{{newhokeid}}
Content-Type: application/json 

### Test 06: Try to modify an existing hoke without a session token
### Negative test
@hokId = {{hoke.response.body.0.musicId}}
PUT {{BASE}}/hoke/{{hokId}}
Content-Type: application/json

{
	"nombre": ###REPLACE###,
	"url": ###REPLACE###,
	"artista": ###REPLACE###,
	"fecha_publicacion": ###REPLACE###,
	"spotify_id": ###REPLACE###
}

### Test 07: Delete an existing hoke
### Positive test

### Create a new hoke, which we will delete
# @name createdhokToDelete
POST {{BASE}}/hoke
Content-Type: application/json
Token: {{token}}

{
	"nombre": ###REPLACE###,
	"url": ###REPLACE###,
	"artista": ###REPLACE###,
	"fecha_publicacion": ###REPLACE###,
	"spotify_id": ###REPLACE###
}

### Check the created hoke
@hokdelId = {{createdhokToDelete.response.body.lastId}}
GET {{BASE}}/hoke/{{hokdelId}}
Content-Type: application/json 

### Delete the hoke
DELETE {{BASE}}/hoke/{{hokdelId}}
Token: {{token}}

### Check the deleted hoke
GET {{BASE}}/hoke/{{hokdelId}}
Content-Type: application/json 

### Test 08: Try to delete a hoke without a session token
### Negative test
DELETE {{BASE}}/hoke/{{hokId}}

