
### This is an auto-generated test suite, it needs to be completed with valid data.
### These are not all tests you need, more of them should be created to evaluate the functional
### requirements of your project. These tests only test the CRUD endpoints of the entity.
### Silence is a DEAL research team project, more info about us in https://deal.us.es
@BASE = http://127.0.0.1:8080/api/v1

### Auxiliary query
### Positive test
### Test 00: Get all existing rusowsky
### This query is used in several of the below tests it should be executed first.
# @name rusowsky
GET {{BASE}}/rusowsky

### Login a(n) users and save the generated token 
### This token is used in several of the below tests it should be executed second.
# @name login
POST {{BASE}}/login 
Content-Type: application/json 

{ 
	"username": ###REPLACE###,
	"password": ###REPLACE###
}

###
@token = {{login.response.body.sessionToken}}


### TESTS BEGIN

### Test 01: Get one existing rusowsky by its id.
### positive test 
@rusId = {{rusowsky.response.body.0.musicId}}
GET {{BASE}}/rusowsky/{{rusId}} 
Content-Type: application/json 


### Test 02: Try get one existing rusowsky by its nonexistent id.
### negative test 
GET {{BASE}}/rusowsky/999999999
Content-Type: application/json 


### Test 03: Add a new rusowsky successfully
### Positive test 
### We assume that the token has been aquired by the login request.
# @name newrusowsky
POST {{BASE}}/rusowsky 
Content-Type: application/json 
Token: {{token}} 

{
	"nombre": ###REPLACE###,
	"url": ###REPLACE###,
	"artista": ###REPLACE###,
	"fecha_publicacion": ###REPLACE###,
	"spotify_id": ###REPLACE###
} 

### Check the created rusowsky

@newrusowskyid = {{newrusowsky.response.body.lastId}}
GET {{BASE}}/rusowsky/{{newrusowskyid}}
Content-Type: application/json 

### Test 04: Add a new rusowsky without a session token
### Negative test 
POST {{BASE}}/rusowsky 
Content-Type: application/json 

{ 
	"nombre": ###REPLACE###,
	"url": ###REPLACE###,
	"artista": ###REPLACE###,
	"fecha_publicacion": ###REPLACE###,
	"spotify_id": ###REPLACE###
}

### Test 05: Modify an existing rusowsky 
### Positive test 
@rusId = {{rusowsky.response.body.0.musicId}} 
PUT {{BASE}}/rusowsky/{{rusId}} 
Content-Type: application/json 
Token: {{token}} 

{ 
	"nombre": ###REPLACE###,
	"url": ###REPLACE###,
	"artista": ###REPLACE###,
	"fecha_publicacion": ###REPLACE###,
	"spotify_id": ###REPLACE###
}

### Check the modified rusowsky

GET {{BASE}}/rusowsky/{{newrusowskyid}}
Content-Type: application/json 

### Test 06: Try to modify an existing rusowsky without a session token
### Negative test
@rusId = {{rusowsky.response.body.0.musicId}}
PUT {{BASE}}/rusowsky/{{rusId}}
Content-Type: application/json

{
	"nombre": ###REPLACE###,
	"url": ###REPLACE###,
	"artista": ###REPLACE###,
	"fecha_publicacion": ###REPLACE###,
	"spotify_id": ###REPLACE###
}

### Test 07: Delete an existing rusowsky
### Positive test

### Create a new rusowsky, which we will delete
# @name createdrusToDelete
POST {{BASE}}/rusowsky
Content-Type: application/json
Token: {{token}}

{
	"nombre": ###REPLACE###,
	"url": ###REPLACE###,
	"artista": ###REPLACE###,
	"fecha_publicacion": ###REPLACE###,
	"spotify_id": ###REPLACE###
}

### Check the created rusowsky
@rusdelId = {{createdrusToDelete.response.body.lastId}}
GET {{BASE}}/rusowsky/{{rusdelId}}
Content-Type: application/json 

### Delete the rusowsky
DELETE {{BASE}}/rusowsky/{{rusdelId}}
Token: {{token}}

### Check the deleted rusowsky
GET {{BASE}}/rusowsky/{{rusdelId}}
Content-Type: application/json 

### Test 08: Try to delete a rusowsky without a session token
### Negative test
DELETE {{BASE}}/rusowsky/{{rusId}}

